// Generated by CIRCT firtool-1.58.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Trigger(	// <stdin>:3:3
  input  clock,	// <stdin>:4:11
         io_push_btn,	// src/main/scala/lab2/trigger.scala:5:16
  output io_trigger	// src/main/scala/lab2/trigger.scala:5:16
);

  reg io_trigger_REG;	// src/main/scala/lab2/trigger.scala:10:41
  always @(posedge clock)	// <stdin>:4:11
    io_trigger_REG <= io_push_btn;	// src/main/scala/lab2/trigger.scala:10:41
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:3:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:3:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:3:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:3:3
      automatic logic [31:0] _RANDOM[0:0];	// <stdin>:3:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:3:3
        `INIT_RANDOM_PROLOG_	// <stdin>:3:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:3:3
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// <stdin>:3:3
        io_trigger_REG = _RANDOM[/*Zero width*/ 1'b0][0];	// <stdin>:3:3, src/main/scala/lab2/trigger.scala:10:41
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:3:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:3:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_trigger = io_push_btn & ~io_trigger_REG;	// <stdin>:3:3, src/main/scala/lab2/trigger.scala:10:{31,33,41}
endmodule

module Counter(	// <stdin>:15:3
  input        clock,	// <stdin>:16:11
               reset,	// <stdin>:17:11
               io_trigger,	// src/main/scala/lab2/counter.scala:4:16
  output [3:0] io_count	// src/main/scala/lab2/counter.scala:4:16
);

  reg [3:0] count_reg;	// src/main/scala/lab2/counter.scala:8:28
  always @(posedge clock) begin	// <stdin>:16:11
    if (reset)	// <stdin>:16:11
      count_reg <= 4'h0;	// src/main/scala/lab2/counter.scala:8:28
    else if (io_trigger) begin	// src/main/scala/lab2/counter.scala:4:16
      if (&count_reg)	// src/main/scala/lab2/counter.scala:8:28, :10:36
        count_reg <= 4'hF;	// src/main/scala/lab2/counter.scala:8:28, :10:36
      else	// src/main/scala/lab2/counter.scala:10:36
        count_reg <= count_reg + 4'h1;	// src/main/scala/lab2/counter.scala:8:28, :10:62
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:15:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:15:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:15:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:15:3
      automatic logic [31:0] _RANDOM[0:0];	// <stdin>:15:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:15:3
        `INIT_RANDOM_PROLOG_	// <stdin>:15:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:15:3
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// <stdin>:15:3
        count_reg = _RANDOM[/*Zero width*/ 1'b0][3:0];	// <stdin>:15:3, src/main/scala/lab2/counter.scala:8:28
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:15:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:15:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_count = count_reg;	// <stdin>:15:3, src/main/scala/lab2/counter.scala:8:28
endmodule

module Lab2(	// <stdin>:31:3
  input        clock,	// <stdin>:32:11
               reset,	// <stdin>:33:11
               io_push_btn,	// src/main/scala/lab2/lab2.scala:7:16
  output [3:0] io_count	// src/main/scala/lab2/lab2.scala:7:16
);

  wire _trigger_io_trigger;	// src/main/scala/lab2/lab2.scala:12:25
  Trigger trigger (	// src/main/scala/lab2/lab2.scala:12:25
    .clock       (clock),
    .io_push_btn (io_push_btn),
    .io_trigger  (_trigger_io_trigger)
  );
  Counter counter (	// src/main/scala/lab2/lab2.scala:13:25
    .clock      (clock),
    .reset      (reset),
    .io_trigger (_trigger_io_trigger),	// src/main/scala/lab2/lab2.scala:12:25
    .io_count   (io_count)
  );
endmodule

